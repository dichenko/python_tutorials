"""
Зачем нужно ООП?

Один класс это хорошо, а два - лучше.
У нас все готово, чтобы сделать игру Pong, где мяч летает по полю, а ракетка его отбивает

- Создайте класс Paddle. Ракетка это обычный прямоугольник.
Пользователь управляет ракеткой просто "водя" мышкой по экрану. Где мышка - там и ракетка.
- Создайте обьект ракетку и запустите её в игру, чтобы пользователь мог ей управлять.
Для рисования прямоугольника используйте функцию pygame.draw.rect(screen, color, (x, y, width, height))

- Добавьте проверку, если мяч столкнулся с ракеткой - мяч должен отскочить

- Если мяч каснулся нижнего края экрана - игра заканчивается

- Усложнение: если мяч каснулся нижнего края экрана, игра не заканчивается, но в игру добавляется новый мяч,
потом еще один, и уже на третье касание игра заканчивается.

"""
# Импортируем библиотеку Pygame
import pygame

# Используем магическую команду
pygame.init()

# размеры окна с игрой
WIDTH, HEIGHT = 800, 600

# Создадим картинку на экране - screen
screen = pygame.display.set_mode((WIDTH, HEIGHT))

WHITE = (255, 255, 255)
RED = (255, 0, 0)
BLUE = (0, 0, 255)


class Ball:  # Класс - это просто схема, которая описывает устройство какого-то обьекта, например, мяча.
    def __init__(self, x, y, r, speed, color):
        """Функцию внутри класса называют 'Метод' Данный метод называется 'конструктор'. Он выполняется в тот момент,
        когда мы создаем новый мяч (обьект класса)"""
        self.x = x
        self.y = y
        self.r = r
        self.speed = speed
        self.color = color

    def update(self):
        """Этот метод будет обновлять координаты мяча и менять направление,
        если он столкнулся со стеной"""
        self.x += self.speed[0]
        self.y += self.speed[1]

        if self.x > WIDTH or self.x < 0:
            self.speed[0] = -self.speed[0]
        if self.y > HEIGHT or self.y < 0:
            self.speed[1] = -self.speed[1]

    def drow(self, screen):
        """Этот метод прорисовывает мяч на экране"""
        pygame.draw.circle(screen, self.color, [self.x, self.y], self.r)


# С помощью класса мы описали, как должен выглядеть любой мяч и что он должен уметь.
# Теперь мы создадим наш первый мяч - обьект.
my_ball = Ball(400, 300, 20, [2, -3], RED)

# Готово! Запускаем игру
while True:
    # Если пользователь нажал крестик - выходим из игры
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()

    # Заливаем фон белым цветом
    screen.fill(WHITE)

    # Обновим координаты мяча
    my_ball.update()

    # Рисуем мяч на экране
    my_ball.drow(screen)

    pygame.display.flip()  # Магическая команда
    pygame.time.delay(10)  # Магическая команда
